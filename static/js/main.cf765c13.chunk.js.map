{"version":3,"sources":["global.js","Burger.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","primaryDark","primaryHover","StyledBurger","styled","button","open","primaryLight","Burger","setOpen","className","onClick","StyledMenu","nav","mobile","Menu","href","App","useState","list","setData","node","useRef","a","fetch","method","headers","body","JSON","stringify","query","response","json","productlist","data","products","edges","length","undefined","useEffect","Something","console","log","Container","ref","Row","map","item","Col","sm","Card","CardBody","name","description","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kxCAEO,IAAMA,EAAeC,YAAH,KAUP,qBAAGC,MAAkBC,eAmB1B,qBAAGD,MAAkBE,gB,2wBC5BlC,IAAMC,EAAeC,IAAOC,OAAV,KAqBA,gBAAGL,EAAH,EAAGA,MAAH,SAAUM,KACfN,EAAMC,YAAcD,EAAMO,gBAOpB,qBAAGD,KAAmB,gBAAkB,eAI1C,qBAAGA,KAAmB,IAAM,OAC1B,qBAAGA,KAAmB,mBAAqB,mBAI3C,qBAAGA,KAAmB,iBAAmB,eAmB7CE,EAdA,SAAC,GAAuB,IAArBF,EAAoB,EAApBA,KAAMG,EAAc,EAAdA,QACtB,OACE,yBAAKC,UAAU,YACX,kBAACP,EAAD,CAAcG,KAAMA,EAAMK,QAAS,kBAAMF,GAASH,KAChD,8BACA,8BACA,iC,gwBCjDV,IAAMM,EAAaR,IAAOS,IAAV,KAKD,qBAAGP,KAAmB,gBAAkB,uBAUhC,qBAAGN,MAAkBc,UAcnB,qBAAGd,MAAkBc,UAgC/BC,EApBF,SAAC,GAAc,IAAZT,EAAW,EAAXA,KACd,OACE,kBAACM,EAAD,CAAYN,KAAMA,GAChB,uBAAGU,KAAK,KAAR,QAGA,uBAAGA,KAAK,UAAR,YAGA,uBAAGA,KAAK,YAAR,cAGA,uBAAGA,KAAK,WAAR,YCiCSC,MAhFf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGWF,oBAAS,GAHpB,mBAGNZ,EAHM,KAGAG,EAHA,KAIPY,EAAOC,mBAJA,4CAUb,gCAAAC,EAAA,6WAcyBC,MAAM,yCAA0C,CACrEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,MAjB3B,0TAcQC,EAdR,gBAmBqBA,EAASC,OAnB9B,OAmBQA,EAnBR,QAoBMC,EAAcD,EAAKE,KAAKC,SAASC,OACrBC,aAA0BC,IAAhBL,GACxBb,EAAQa,GAtBZ,4CAVa,sBA4Cb,OAtCAM,qBAAU,YANG,mCAOXC,MAoCFC,QAAQC,IAAI,OAAQvB,GAElB,6BACE,kBAACwB,EAAA,EAAD,KACE,6BACE,kBAAC,IAAD,CAAe3C,MAZT,CACZC,YAAa,UACbM,aAAc,UACdL,aAAc,UACdY,OAAQ,UASA,oCACE,yBAAK8B,IAAKvB,GACR,kBAAC,EAAD,CAAQf,KAAMA,EAAMG,QAASA,IAC7B,kBAAC,EAAD,CAAMH,KAAMA,EAAMG,QAASA,KAG7B,kBAACX,EAAD,MACA,yBAAKY,UAAU,mBACb,wBAAIA,UAAU,eAAd,mBACA,kBAACmC,EAAA,EAAD,CAAKnC,UAAU,QACZS,EAAK2B,KAAI,SAACC,GAAD,OACR,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIvC,UAAU,eACpB,kBAACwC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,4BAAKJ,EAAK1B,KAAK+B,MACf,2BAAIL,EAAK1B,KAAKgC,2BC7DpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.cf765c13.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html, body {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  *, *::after, *::before {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    align-items: center;\r\n    background: ${({ theme }) => theme.primaryDark};\r\n    color: red;\r\n    display: flex;\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\r\n    height: 100vh;\r\n    justify-content: center;\r\n    text-rendering: optimizeLegibility;\r\n  }\r\n  h1 {\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n  }\r\n \r\n  small {\r\n    display: block;\r\n  }\r\n  a {\r\n    color: red;\r\n    color: ${({ theme }) => theme.primaryHover};\r\n    text-decoration: none;\r\n  }\r\n  .product_listing h1{font-size:3rem;color:#fff;font-weight: bolder;margin:0 0 25px 0}\r\n  .product_listing .card .card-body{border: 2px solid #fff;\r\n    color: #fff;padding: 35px;}\r\n  .product_listing h2{font-weight: bolder;margin:10px 0px 20px 0}\r\n   .product_listing .listing_div{ margin-bottom:35px}\r\n  `;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledBurger = styled.button`\r\n  position: absolute;\r\n  top: auto;\r\n  left: 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  width: 2rem;\r\n  height: 2rem;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  z-index: 10;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  div {\r\n    width: 2rem;\r\n    height: 0.25rem;\r\n    background: ${({ theme, open }) =>\r\n      open ? theme.primaryDark : theme.primaryLight};\r\n    border-radius: 10px;\r\n    transition: all 0.3s linear;\r\n    position: relative;\r\n    transform-origin: 1px;\r\n\r\n    :first-child {\r\n      transform: ${({ open }) => (open ? \"rotate(45deg)\" : \"rotate(0)\")};\r\n    }\r\n\r\n    :nth-child(2) {\r\n      opacity: ${({ open }) => (open ? \"0\" : \"1\")};\r\n      transform: ${({ open }) => (open ? \"translateX(20px)\" : \"translateX(0)\")};\r\n    }\r\n\r\n    :nth-child(3) {\r\n      transform: ${({ open }) => (open ? \"rotate(-45deg)\" : \"rotate(0)\")};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Burger = ({ open, setOpen }) => {\r\n  return (\r\n    <div className=\"menulink\">\r\n        <StyledBurger open={open} onClick={() => setOpen(!open)}>\r\n          <div />\r\n          <div />\r\n          <div />\r\n        </StyledBurger>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Burger;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledMenu = styled.nav`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background: #fff;\r\n  transform: ${({ open }) => (open ? \"translateX(0)\" : \"translateX(-100%)\")};\r\n  height: 100vh;\r\n  text-align: left;\r\n  padding: 2rem 10rem;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index:9;\r\n  transition: transform 0.6s ease-in-out;\r\n\r\n  @media (max-width: ${({ theme }) => theme.mobile}) {\r\n    width: 100%;\r\n  }\r\n\r\n  a {\r\n    font-size: 2rem;\r\n    text-transform: uppercase;\r\n    padding: 2rem 0;\r\n    font-weight: bold;\r\n    letter-spacing: 0.5rem;\r\n    color:#000;\r\n    text-decoration: none;\r\n    transition: color 0.3s linear;\r\n\r\n    @media (max-width: ${({ theme }) => theme.mobile}) {\r\n      font-size: 1.5rem;\r\n      text-align: center;\r\n    }\r\n\r\n    &:hover {\r\n      color: #f44848;\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst Menu = ({ open }) => {\r\n  return (\r\n    <StyledMenu open={open}>\r\n      <a href=\"/\">\r\n       Home\r\n      </a>\r\n      <a href=\"/about\">\r\n        About us\r\n      </a>\r\n      <a href=\"/contact\">\r\n       Contact Us\r\n      </a>\r\n      <a href=\"/carrer\">\r\n       Carrer\r\n      </a>\r\n    </StyledMenu>\r\n  );\r\n};\r\n\r\n\r\nexport default Menu;\r\n","import React, { useState, Component, useEffect, useRef } from 'react';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./global\";\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { Card, CardBody, } from 'reactstrap';\nimport Burger from \"./Burger\";\nimport Menu from \"./Menu\";\n\n\nfunction App() {\n\n  const [list, setData] = useState([]);\n  const [open, setOpen] = useState(false);\n  const node = useRef();\n\n  useEffect(() => {\n    Something();\n  })\n\n  async function Something() {\n    const query = `\n              {\n                products(first: 5) {\n                  edges {\n                    node {\n                      id\n                      name\n                      description\n                    }\n                  }\n                }\n              }\n            `;\n    const response = await fetch('https://pwa.demo.saleor.rocks/graphql/', {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query })\n    });\n    const json = await response.json();\n    var productlist = json.data.products.edges;\n    if (productlist.length && productlist !== undefined) {\n      setData(productlist);\n    }\n  }\n\n  const theme = {\n    primaryDark: \"#0D0C1D\",\n    primaryLight: \"#EFFFFA\",\n    primaryHover: \"#343078\",\n    mobile: \"576px\"\n  };\n\n  console.log(\"list\", list);\n  return (\n    <div>\n      <Container>\n        <div>\n          <ThemeProvider theme={theme}>\n            <>\n              <div ref={node}>\n                <Burger open={open} setOpen={setOpen} />\n                <Menu open={open} setOpen={setOpen} />\n              </div>\n\n              <GlobalStyles />\n              <div className=\"product_listing\">\n                <h1 className=\"text-center\">Sales & Product</h1>\n                <Row className=\"mb-2\">\n                  {list.map((item) => (\n                    <Col sm=\"4\" className=\"listing_div\">\n                      <Card>\n                        <CardBody>\n                          <h2>{item.node.name}</h2>\n                          <p>{item.node.description}</p>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                  ))}\n                </Row>\n              </div>\n\n            </>\n          </ThemeProvider>\n        </div>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}